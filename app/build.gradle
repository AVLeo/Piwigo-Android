apply plugin: 'com.android.application'
apply plugin: 'com.android.databinding'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    defaultConfig {
        applicationId "org.piwigo"
        minSdkVersion 11
        targetSdkVersion 22
        versionCode 1
        versionName "2.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:support-annotations:22.2.1'
    compile 'com.android.support:design:22.2.1'

    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    compile 'com.jakewharton:butterknife:7.0.1'

    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.picasso:picasso:2.5.2'

    compile 'io.reactivex:rxjava:1.0.13'
    compile 'io.reactivex:rxandroid:0.25.0'

    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
        transitive = true;
    }

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'

    testCompile ('com.squareup.assertj:assertj-android:1.0.0') {
        exclude group: 'com.android.support'
    }
    testCompile ('com.squareup.assertj:assertj-android-support-v4:1.0.0') {
        exclude group: 'com.android.support'
    }
    testCompile ('com.squareup.assertj:assertj-android-appcompat-v7:1.0.0') {
        exclude group: 'com.android.support'
    }

    testApt 'com.google.dagger:dagger-compiler:2.0.1'
    testProvided 'org.glassfish:javax.annotation:10.0-b28'

    testCompile 'com.squareup.okhttp:mockwebserver:2.4.0'
    testCompile 'com.squareup.retrofit:retrofit-mock:1.9.0'
}

task addGeneratedTestSources {
    def file = file(project.name + ".iml")
    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]

            new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/build/generated/source/apt/test/debug', 'isTestSource': 'true', 'generated': 'true'])

            def writer = new StringWriter()
            new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
            file.text = writer.toString()
        } catch (FileNotFoundException e) {
            // iml not found, common on command line only builds
        }
    }
}
tasks.preBuild.dependsOn addGeneratedTestSources